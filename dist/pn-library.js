/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["PN"] = factory();
	else
		root["PN"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/dom/dom.js":
/*!************************!*\
  !*** ./src/dom/dom.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   audioElements: () => (/* binding */ audioElements),\n/* harmony export */   canvasElements: () => (/* binding */ canvasElements),\n/* harmony export */   createAudio: () => (/* binding */ createAudio),\n/* harmony export */   createCanvas: () => (/* binding */ createCanvas)\n/* harmony export */ });\n// domElements.js\n\nvar canvasElements = [];\nvar audioElements = [];\n/**\n * Create a new canvas element and append it to the DOM.\n * Maintain a reference to the created canvas.\n * @param {Object} options - Options for the canvas (width, height, etc.)\n * @returns {HTMLCanvasElement} The created canvas element\n */\nfunction createCanvas() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    width: 800,\n    height: 600\n  };\n  var canvas = document.createElement('canvas');\n  canvas.width = options.width;\n  canvas.height = options.height;\n  document.body.appendChild(canvas);\n  canvasElements.push(canvas);\n  return canvas;\n}\n\n/**\n * Create a new audio input element and append it to the DOM.\n * Maintain a reference to the created audio input.\n * @returns {HTMLAudioElement} The created audio element\n */\nfunction createAudio() {\n  var audio = document.createElement('audio');\n  audio.controls = true;\n  document.body.appendChild(audio);\n  audioElements.push(audio);\n  return audio;\n}\n\n//# sourceURL=webpack://PN/./src/dom/dom.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PN: () => (/* reexport safe */ _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   audioElements: () => (/* reexport safe */ _dom_dom_js__WEBPACK_IMPORTED_MODULE_5__.audioElements),\n/* harmony export */   canvasElements: () => (/* reexport safe */ _dom_dom_js__WEBPACK_IMPORTED_MODULE_5__.canvasElements),\n/* harmony export */   createAudio: () => (/* reexport safe */ _dom_dom_js__WEBPACK_IMPORTED_MODULE_5__.createAudio),\n/* harmony export */   createCanvas: () => (/* reexport safe */ _dom_dom_js__WEBPACK_IMPORTED_MODULE_5__.createCanvas),\n/* harmony export */   createNote: () => (/* reexport safe */ _wave_player_js__WEBPACK_IMPORTED_MODULE_2__.createNote),\n/* harmony export */   createSong: () => (/* reexport safe */ _wave_player_js__WEBPACK_IMPORTED_MODULE_2__.createSong),\n/* harmony export */   instrument: () => (/* reexport safe */ _instruments_instrumentSelector_js__WEBPACK_IMPORTED_MODULE_1__.instrument),\n/* harmony export */   readWavFile: () => (/* reexport safe */ _input_wavProcessor_js__WEBPACK_IMPORTED_MODULE_6__.readWavFile),\n/* harmony export */   save: () => (/* reexport safe */ _output_wav_js__WEBPACK_IMPORTED_MODULE_3__.save),\n/* harmony export */   setDuration: () => (/* reexport safe */ _wave_setProperties_js__WEBPACK_IMPORTED_MODULE_4__.setDuration),\n/* harmony export */   setHarmonic: () => (/* reexport safe */ _wave_setProperties_js__WEBPACK_IMPORTED_MODULE_4__.setHarmonic),\n/* harmony export */   setVolume: () => (/* reexport safe */ _wave_setProperties_js__WEBPACK_IMPORTED_MODULE_4__.setVolume),\n/* harmony export */   singVoice: () => (/* reexport safe */ _wave_player_js__WEBPACK_IMPORTED_MODULE_2__.singVoice),\n/* harmony export */   yinReadWavFile: () => (/* reexport safe */ _input_yinWavProcessor_js__WEBPACK_IMPORTED_MODULE_7__.yinReadWavFile)\n/* harmony export */ });\n/* harmony import */ var _pn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pn.js */ \"./src/pn.js\");\n/* harmony import */ var _instruments_instrumentSelector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instruments/instrumentSelector.js */ \"./src/instruments/instrumentSelector.js\");\n/* harmony import */ var _wave_player_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wave/player.js */ \"./src/wave/player.js\");\n/* harmony import */ var _output_wav_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./output/wav.js */ \"./src/output/wav.js\");\n/* harmony import */ var _wave_setProperties_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./wave/setProperties.js */ \"./src/wave/setProperties.js\");\n/* harmony import */ var _dom_dom_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom/dom.js */ \"./src/dom/dom.js\");\n/* harmony import */ var _input_wavProcessor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./input/wavProcessor.js */ \"./src/input/wavProcessor.js\");\n/* harmony import */ var _input_yinWavProcessor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./input/yinWavProcessor.js */ \"./src/input/yinWavProcessor.js\");\n// index.js - The entry point file for Webpack\n\n // Import the base PN object\n // Add PN.instrument method\n// Import other functions\n\n\n\n\n\n\n\n// Attach PN and other functions to the global window object to make them accessible\n\n\n\n//# sourceURL=webpack://PN/./src/index.js?");

/***/ }),

/***/ "./src/input/fft.js":
/*!**************************!*\
  !*** ./src/input/fft.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeFrequencies: () => (/* binding */ analyzeFrequencies)\n/* harmony export */ });\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// Function to pad data to the next power of 2\nfunction padToPowerOfTwo(data) {\n  var nextPowerOfTwo = Math.pow(2, Math.ceil(Math.log2(data.length)));\n  var paddedData = new Array(nextPowerOfTwo).fill(0);\n  for (var i = 0; i < data.length; i++) {\n    paddedData[i] = data[i];\n  }\n  return paddedData;\n}\n\n// Function to perform FFT (recursive implementation)\nfunction fft(data) {\n  var n = data.length;\n  if (n <= 1) return data;\n\n  // Separate even and odd terms\n  var even = fft(data.filter(function (_, i) {\n    return i % 2 === 0;\n  }));\n  var odd = fft(data.filter(function (_, i) {\n    return i % 2 !== 0;\n  }));\n  var results = new Array(n).fill(0).map(function () {\n    return [0, 0];\n  });\n  for (var k = 0; k < n / 2; k++) {\n    var expTerm = -2 * Math.PI * k / n;\n    var cosine = Math.cos(expTerm);\n    var sine = Math.sin(expTerm);\n\n    // Calculate the real and imaginary parts\n    var real = cosine * odd[k][0] - sine * odd[k][1];\n    var imag = sine * odd[k][0] + cosine * odd[k][1];\n    results[k] = [even[k][0] + real, even[k][1] + imag];\n    results[k + n / 2] = [even[k][0] - real, even[k][1] - imag];\n  }\n  return results;\n}\n\n// Function to compute magnitudes from FFT output\nfunction computeMagnitudes(fftData) {\n  return fftData.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      real = _ref2[0],\n      imag = _ref2[1];\n    return Math.sqrt(Math.pow(real, 2) + Math.pow(imag, 2));\n  });\n}\n\n// Function to calculate RMS for volume estimation\nfunction calculateRMS(data) {\n  var sumSquares = 0;\n  for (var i = 0; i < data.length; i++) {\n    sumSquares += data[i] * data[i];\n  }\n  return Math.sqrt(sumSquares / data.length);\n}\n\n// Function to analyze frequencies and volume in audio data\nfunction analyzeFrequencies(data, sampleRate) {\n  // Step 1: Pad data to the next power of 2\n  var paddedData = padToPowerOfTwo(data);\n\n  // Step 2: Convert padded data to complex format (real, imaginary) for FFT\n  var complexData = paddedData.map(function (value) {\n    return [value, 0];\n  });\n\n  // Step 3: Perform FFT on the complex data\n  var fftData = fft(complexData);\n\n  // Step 4: Calculate magnitudes\n  var magnitudes = computeMagnitudes(fftData);\n\n  // Step 5: Calculate frequencies\n  var frequencies = magnitudes.map(function (_, index) {\n    return index * sampleRate / paddedData.length;\n  });\n\n  // Step 6: Find the frequency with the highest magnitude (dominant frequency)\n  var maxIndex = 0;\n  for (var i = 1; i < magnitudes.length; i++) {\n    if (magnitudes[i] > magnitudes[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  var dominantFrequency = frequencies[maxIndex];\n\n  // Step 7: Calculate the volume using RMS\n  var volume = calculateRMS(data);\n\n  // Step 8: Calculate the chunk duration in seconds\n  var duration = data.length / sampleRate;\n  return {\n    dominantFrequency: dominantFrequency,\n    volume: volume,\n    duration: duration\n  };\n}\n\n//# sourceURL=webpack://PN/./src/input/fft.js?");

/***/ }),

/***/ "./src/input/parseStringInput.js":
/*!***************************************!*\
  !*** ./src/input/parseStringInput.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// parseStringInput.js\n\n// Helper function to parse song input\nfunction parseSongInput(songData) {\n  var parsedData = [];\n  var _iterator = _createForOfIteratorHelper(songData),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entry = _step.value;\n      // Split by colon to separate duration and notes\n      var _entry$split = entry.split(':'),\n        _entry$split2 = _slicedToArray(_entry$split, 2),\n        durationStr = _entry$split2[0],\n        notesStr = _entry$split2[1];\n      var duration = parseFloat(durationStr); // Convert the duration to a float\n\n      // Split the notes by '-' for multiple notes\n      var notesArray = notesStr.split('-');\n      parsedData.push({\n        duration: duration,\n        // Parsed duration\n        notes: notesArray // Array of note names (e.g., [\"a4\", \"f5\"])\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return parsedData;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseSongInput);\n\n//# sourceURL=webpack://PN/./src/input/parseStringInput.js?");

/***/ }),

/***/ "./src/input/wavProcessor.js":
/*!***********************************!*\
  !*** ./src/input/wavProcessor.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseWav: () => (/* binding */ parseWav),\n/* harmony export */   processAudioData: () => (/* binding */ processAudioData),\n/* harmony export */   readWavFile: () => (/* binding */ readWavFile)\n/* harmony export */ });\n/* harmony import */ var _input_fft_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../input/fft.js */ \"./src/input/fft.js\");\n// wavProcessor.js\n\n\n/**\n * Reads a WAV file from the provided URL, parses it, and processes the audio data.\n * @param {string} url - The URL of the WAV file to read.\n */\nfunction readWavFile(url, callback) {\n  fetch(url).then(function (response) {\n    return response.arrayBuffer();\n  }).then(function (buffer) {\n    var wavData = parseWav(buffer); // Parse the WAV file\n    var sampleRate = wavData.sampleRate;\n    var audioData = wavData.samples;\n\n    //console.log(\"WAV file parsed successfully\");\n    //console.log(\"Sample Rate: \", sampleRate);\n    //console.log(\"Number of samples: \", audioData.length);\n\n    var voiceFrequencies = processAudioData(audioData, sampleRate);\n    //console.log(\"Voice F : \", voiceFrequencies);\n\n    if (callback) {\n      callback(voiceFrequencies); // Pass voiceFrequencies to the callback\n    }\n  })[\"catch\"](function (err) {\n    console.error(\"Error loading WAV file: \", err);\n  });\n}\n\n/**\n * Parses WAV file data from an ArrayBuffer.\n * @param {ArrayBuffer} buffer - The WAV file buffer.\n * @returns {Object} Parsed WAV data including sample rate and audio samples.\n */\nfunction parseWav(buffer) {\n  var view = new DataView(buffer);\n  var numChannels = view.getUint16(22, true);\n  var sampleRate = view.getUint32(24, true);\n  var bitsPerSample = view.getUint16(34, true);\n  var dataOffset = 44; // WAV header size (assumes no additional sub-chunks)\n  var bytesPerSample = bitsPerSample / 8;\n  var numSamples = Math.floor((view.byteLength - dataOffset) / (numChannels * bytesPerSample));\n\n  //console.log(\"Num Channels: \", numChannels);\n  //console.log(\"Sample Rate: \", sampleRate);\n  //console.log(\"Bits Per Sample: \", bitsPerSample);\n  //console.log(\"Number of Samples: \", numSamples);\n\n  var samples = new Float32Array(numSamples);\n  for (var i = 0; i < numSamples; i++) {\n    var sample = 0;\n    var sampleIndex = dataOffset + i * numChannels * bytesPerSample;\n\n    // Ensure we are not reading beyond the available buffer length\n    if (sampleIndex >= buffer.byteLength) {\n      console.error(\"Sample index exceeds buffer length at sample\", i);\n      break;\n    }\n\n    // If stereo, take only the left channel (instead of averaging)\n    if (numChannels === 2) {\n      var left = view.getInt16(sampleIndex, true);\n      sample = left;\n    } else {\n      sample = view.getInt16(sampleIndex, true);\n    }\n\n    // Normalize to [-1, 1] range\n    samples[i] = sample / 32768;\n  }\n  return {\n    sampleRate: sampleRate,\n    samples: samples\n  };\n}\n\n/**\n * @param {Float32Array} audioData - The audio data samples.\n * @param {number} sampleRate - The sample rate of the audio data.\n */\nfunction processAudioData(audioData, sampleRate) {\n  var voiceFrequencies = new Map();\n  var chunkSize = 8; // Adjusted chunk size for more effective analysis\n  var numChunks = Math.ceil(audioData.length / chunkSize);\n\n  //console.log(\"Number of Chunks:\", numChunks);\n\n  for (var i = 0; i < numChunks; i++) {\n    var start = i * chunkSize;\n    var end = Math.min(start + chunkSize, audioData.length);\n    var chunk = audioData.slice(start, end);\n\n    // Call the analyzeFrequencies function\n    var result = (0,_input_fft_js__WEBPACK_IMPORTED_MODULE_0__.analyzeFrequencies)(chunk, sampleRate);\n    if (!isNaN(result.dominantFrequency)) {\n      console.log(\"Chunk \".concat(i + 1, \": Frequency = \").concat(result.dominantFrequency, \" Hz, Volume = \").concat(result.volume, \", Duration = \").concat(result.duration));\n      voiceFrequencies.set(i, [result.dominantFrequency, result.volume, result.duration]);\n    } else {\n      console.log(\"Chunk \".concat(i + 1, \": Frequency could not be determined (NaN)\"));\n    }\n  }\n\n  //console.log(\"Processed Voice Frequencies:\", voiceFrequencies); // Log all voice frequencies\n  return voiceFrequencies;\n}\n\n// Export functions and data for CommonJS\n\n\n//# sourceURL=webpack://PN/./src/input/wavProcessor.js?");

/***/ }),

/***/ "./src/input/yin.js":
/*!**************************!*\
  !*** ./src/input/yin.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   yin: () => (/* binding */ yin)\n/* harmony export */ });\nvar DEFAULT_THRESHOLD = 0.07;\nfunction difference(data) {\n  var n = data.length;\n  var results = new Float32Array(n);\n  var difference;\n  var summation;\n  var windowSize = Math.floor(n * 0.5);\n  for (var tau = 0; tau <= windowSize; tau++) {\n    summation = 0;\n    for (var j = 0; j < windowSize; j++) {\n      difference = data[j] - data[j + tau];\n      summation += difference * difference;\n    }\n    results[tau] = summation;\n  }\n  return results;\n}\nfunction cumulativeMeanNormalizedDifference(data) {\n  var n = data.length;\n  var results = new Float32Array(n);\n  var summation;\n  for (var tau = 0; tau < n; tau++) {\n    summation = 0;\n    for (var j = 0; j <= tau; j++) {\n      summation += data[j];\n    }\n    results[tau] = data[tau] / (summation / tau);\n  }\n  return results;\n}\nfunction absoluteThreshold(data, threshold) {\n  var k = Number.POSITIVE_INFINITY;\n  var tau;\n  for (var i = 0, n = data.length; i < n; i++) {\n    var x = data[i];\n    if (x < threshold) {\n      return i;\n    }\n    if (x < k) {\n      k = x;\n      tau = i;\n    }\n  }\n  return tau;\n}\nfunction bestLocalEstimate(data, tau) {\n  var i = tau + 1;\n  var n = data.length;\n  var k = data[tau];\n  while (i < n && data[i] < k) {\n    k = data[i];\n    i++;\n  }\n  return i - 1;\n}\n\n// Function to calculate RMS for volume estimation\nfunction calculateRMS(data) {\n  var sumSquares = 0;\n  for (var i = 0; i < data.length; i++) {\n    sumSquares += data[i] * data[i];\n  }\n  return Math.sqrt(sumSquares / data.length);\n}\n\n/**\n * Enhanced YIN algorithm to estimate fundamental frequency, duration, and volume of audio signal\n * @param {Float32Array} data The time-domain data for the audio signal\n * @param {Number} sampleRate The sample rate\n * @param {Number} [threshold = 0.07] The threshold\n * @returns {Object} An object with frequency, volume, and chunk duration\n */\nfunction yin(data, sampleRate) {\n  var aThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_THRESHOLD;\n  // Step 1: Calculate the difference function\n  var diff = difference(data);\n\n  // Step 2: Calculate the cumulative mean normalized difference function\n  var cmnd = cumulativeMeanNormalizedDifference(diff);\n\n  // Step 3: Apply the threshold to find the first dip\n  var tau = absoluteThreshold(cmnd, aThreshold);\n  if (tau === -1) {\n    return {\n      frequency: NaN,\n      duration: 0,\n      volume: 0\n    }; // If no valid tau is found, return NaN\n  }\n\n  // Step 4: Refine the estimate using parabolic interpolation\n  var refinedTau = bestLocalEstimate(cmnd, tau);\n\n  // Step 5: Convert the refined lag into a frequency\n  var frequency = sampleRate / refinedTau;\n\n  // Step 6: Calculate the chunk's volume using RMS\n  var volume = calculateRMS(data);\n\n  // Step 7: Calculate the chunk duration in seconds\n  var duration = data.length / sampleRate;\n  return {\n    frequency: frequency,\n    volume: volume,\n    duration: duration\n  };\n}\n\n//# sourceURL=webpack://PN/./src/input/yin.js?");

/***/ }),

/***/ "./src/input/yinWavProcessor.js":
/*!**************************************!*\
  !*** ./src/input/yinWavProcessor.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   yinParseWav: () => (/* binding */ yinParseWav),\n/* harmony export */   yinProcessAudioData: () => (/* binding */ yinProcessAudioData),\n/* harmony export */   yinReadWavFile: () => (/* binding */ yinReadWavFile)\n/* harmony export */ });\n/* harmony import */ var _input_yin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../input/yin.js */ \"./src/input/yin.js\");\n\nvar voiceFrequencies = new Map();\nvar volumeDuration = [];\nfunction yinReadWavFile(url, callback) {\n  fetch(url).then(function (response) {\n    return response.arrayBuffer();\n  }).then(function (buffer) {\n    var wavData = yinParseWav(buffer); // Parse the WAV file\n    var sampleRate = wavData.sampleRate;\n    var audioData = wavData.samples;\n\n    //console.log(\"WAV file parsed successfully\");\n    //console.log(\"Sample Rate: \", sampleRate);\n    //console.log(\"Number of samples: \", audioData.length);\n\n    var voiceFrequencies = yinProcessAudioData(audioData, sampleRate);\n    //console.log(\"Voice F : \", voiceFrequencies);\n\n    if (callback) {\n      callback(voiceFrequencies); // Pass voiceFrequencies to the callback\n    }\n  })[\"catch\"](function (err) {\n    console.error(\"Error loading WAV file: \", err);\n  });\n}\nfunction yinParseWav(buffer) {\n  var view = new DataView(buffer);\n\n  // WAV file parsing: Extract header info and PCM data\n  var numChannels = view.getUint16(22, true);\n  var sampleRate = view.getUint32(24, true);\n  var bitsPerSample = view.getUint16(34, true);\n  var dataOffset = 44; // WAV header size (assumes no additional sub-chunks)\n  var bytesPerSample = bitsPerSample / 8;\n  var numSamples = Math.floor((view.byteLength - dataOffset) / (numChannels * bytesPerSample));\n  console.log(\"Num Channels: \", numChannels);\n  console.log(\"Sample Rate: \", sampleRate);\n  console.log(\"Bits Per Sample: \", bitsPerSample);\n  console.log(\"Number of Samples: \", numSamples);\n  var samples = new Float32Array(numSamples);\n  for (var i = 0; i < numSamples; i++) {\n    var sample = 0;\n    var sampleIndex = dataOffset + i * numChannels * bytesPerSample;\n\n    // Ensure we are not reading beyond the available buffer length\n    if (sampleIndex >= buffer.byteLength) {\n      console.error(\"Sample index exceeds buffer length at sample\", i);\n      break;\n    }\n\n    // If stereo, take only the left channel (instead of averaging)\n    if (numChannels === 2) {\n      var left = view.getInt16(sampleIndex, true);\n      sample = left;\n    } else {\n      sample = view.getInt16(sampleIndex, true);\n    }\n\n    // Normalize to [-1, 1] range\n    samples[i] = sample / 32768;\n  }\n  return {\n    sampleRate: sampleRate,\n    samples: samples\n  };\n}\nfunction yinProcessAudioData(audioData, sampleRate) {\n  var voiceFrequencies = new Map();\n  var chunkSize = 216; // Use 11025 samples for each chunk\n  var numChunks = Math.ceil(audioData.length / chunkSize);\n  var myObj1 = [];\n  console.log(\"numChunks : \" + numChunks);\n  var currentDuration;\n  for (var i = 0; i < numChunks; i++) {\n    var start = i * chunkSize;\n    var end = Math.min(start + chunkSize, audioData.length);\n    var chunk = audioData.slice(start, end);\n\n    // Call the analyzeFrequencies function\n    // Use the enhanced YIN algorithm to get frequency, duration, and volume\n    var result = (0,_input_yin_js__WEBPACK_IMPORTED_MODULE_0__.yin)(chunk, sampleRate);\n    if (!isNaN(result.frequency)) {\n      console.log(\"Chunk \".concat(i + 1, \": Frequency = \").concat(result.frequency, \" Hz, Volume = \").concat(result.volume, \", Duration = \").concat(result.duration));\n      voiceFrequencies.set(i, [result.frequency, result.volume, result.duration]);\n    } else {\n      console.log(\"Chunk \".concat(i + 1, \": Frequency could not be determined (NaN)\"));\n    }\n  }\n  console.log(\"Voice F : \", voiceFrequencies); // This will log after processing is complete\n  return voiceFrequencies;\n}\n\n// Export functions and data for CommonJS\n\n\n//# sourceURL=webpack://PN/./src/input/yinWavProcessor.js?");

/***/ }),

/***/ "./src/instruments/envelope.js":
/*!*************************************!*\
  !*** ./src/instruments/envelope.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accordion: () => (/* binding */ accordion),\n/* harmony export */   acousticGuitar: () => (/* binding */ acousticGuitar),\n/* harmony export */   bagpipes: () => (/* binding */ bagpipes),\n/* harmony export */   bassGuitar: () => (/* binding */ bassGuitar),\n/* harmony export */   bellLike: () => (/* binding */ bellLike),\n/* harmony export */   brassLike: () => (/* binding */ brassLike),\n/* harmony export */   cello: () => (/* binding */ cello),\n/* harmony export */   clarinet: () => (/* binding */ clarinet),\n/* harmony export */   combi: () => (/* binding */ combi),\n/* harmony export */   diamond: () => (/* binding */ diamond),\n/* harmony export */   drawl: () => (/* binding */ drawl),\n/* harmony export */   drop: () => (/* binding */ drop),\n/* harmony export */   electricGuitar: () => (/* binding */ electricGuitar),\n/* harmony export */   envelopes: () => (/* binding */ envelopes),\n/* harmony export */   flat: () => (/* binding */ flat),\n/* harmony export */   glottalStop: () => (/* binding */ glottalStop),\n/* harmony export */   guitar: () => (/* binding */ guitar),\n/* harmony export */   harp: () => (/* binding */ harp),\n/* harmony export */   marimba: () => (/* binding */ marimba),\n/* harmony export */   organ: () => (/* binding */ organ),\n/* harmony export */   organLike: () => (/* binding */ organLike),\n/* harmony export */   percussionLike: () => (/* binding */ percussionLike),\n/* harmony export */   piano: () => (/* binding */ piano),\n/* harmony export */   rise: () => (/* binding */ rise),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   saxophone: () => (/* binding */ saxophone),\n/* harmony export */   steelDrum: () => (/* binding */ steelDrum),\n/* harmony export */   synthBass: () => (/* binding */ synthBass),\n/* harmony export */   synthPad: () => (/* binding */ synthPad),\n/* harmony export */   tadpole: () => (/* binding */ tadpole),\n/* harmony export */   tempered: () => (/* binding */ tempered),\n/* harmony export */   timpani: () => (/* binding */ timpani),\n/* harmony export */   triangle: () => (/* binding */ triangle),\n/* harmony export */   trombone: () => (/* binding */ trombone),\n/* harmony export */   trumpet: () => (/* binding */ trumpet),\n/* harmony export */   violin: () => (/* binding */ violin),\n/* harmony export */   woodwindLike: () => (/* binding */ woodwindLike),\n/* harmony export */   xylophone: () => (/* binding */ xylophone)\n/* harmony export */ });\n// envelope.js\n\n// Envelopes control the shape of the note and how it's played\nvar envelopes = {};\n\n// Initialize envelopes\nenvelopes['drop'] = drop;\nenvelopes['rise'] = rise;\nenvelopes['round'] = round;\nenvelopes['triangle'] = triangle;\nenvelopes['tadpole'] = tadpole;\nenvelopes['flat'] = flat;\nenvelopes['combi'] = combi;\nenvelopes['diamond'] = diamond;\nenvelopes['drawl'] = drawl;\nenvelopes['tempered'] = tempered;\n\n// Envelope Functions\n\n//\n// -----\n//\n// Flat envelope: constant amplitude\n/*\nAttack (A): 0 (instant)\nDecay (D): 0 (no decay)\nSustain (S): 1 (constant sustain level)\nRelease (R): 0 (no release)\n*/\nfunction flat(input, duration) {\n  return 1;\n}\n\n// -- .\n//     \\\n//      \\\n// Drop envelope: cosine decay\n/*\nAttack (A): 0 (no attack phase)\nDecay (D): The entire duration is a decay phase, decaying from 1 to 0.\nSustain (S): 0 (no sustain)\nRelease (R): The function ends at 0, meaning the release is implicit.\n*/\n\nfunction drop(input, duration) {\n  return Math.cos(Math.PI * input / (2 * duration));\n}\n\n//   . --\n//  /\n// /\n// Rise envelope: sine ramp up\n/*\nAttack (A): The entire duration is an attack phase, rising smoothly from 0 to 1.\nDecay (D): 0 (no decay)\nSustain (S): 0 (no sustain)\nRelease (R): 0 (no release)\n*/\nfunction rise(input, duration) {\n  return Math.sin(Math.PI * input / (2 * duration));\n}\n\n// flute \n//  . -- .\n//  /      \\\n// /        \\\n// Round envelope: sine wave up and down\n/*\nAttack (A): The first half of the duration (rising from 0 to 1).\nDecay (D): The second half of the duration (falling from 1 to 0).\nSustain (S): 0 (no sustain phase)\nRelease (R): Implicit (since the function returns to 0).\n*/\nfunction round(input, duration) {\n  return Math.sin(Math.PI * input / duration);\n}\n\n//   /\\\n//  /  \\\n// /    \\\n\n// Triangle envelope: sawtooth wave\n/*\nAttack (A): The rising part of the triangle (from 0 to 1).\nDecay (D): The falling part of the triangle (from 1 to 0).\nSustain (S): 0 (no sustain phase)\nRelease (R): Implicit (since the function returns to 0).\n*/\n\n/*\n\n/\\    /\\\n  \\/\\/\n\n*/\nfunction triangle(input, duration) {\n  return 2 / Math.PI * Math.asin(Math.sin(2 * Math.PI * input / duration));\n}\n\n/*\n/|    /|\n  |   |\n*/\n\n// Tadpole-shaped envelope\nfunction tadpole(input, duration) {\n  return Math.sin(Math.PI * input / duration) - 0.5 * Math.sin(2 * Math.PI * input / duration) + 0.333 * Math.sin(3 * Math.PI * input / duration) - 0.25 * Math.sin(4 * Math.PI * input / duration);\n}\n\n/*   /\\/\\/\\        /\\/\\/\\\n  /      \\      /      \\\n\n*/\n// Combi envelope: combination of sine and cosine\nfunction combi(input, duration) {\n  return Math.sin(Math.PI * input / duration) / 2 + Math.cos(Math.PI * input / (2 * duration)) / 3;\n}\n\n// Diamond envelope: multiple sine waves combined\n/*\n/\\  /\\  /\\      /\\\n  \\/  \\/  \\/\\/  \\/\n\n*/\nfunction diamond(input, duration) {\n  return 2 / Math.PI * Math.asin(Math.sin(Math.PI * input / duration)) / 4 + 2 / Math.PI * Math.asin(Math.sin(2 * Math.PI * input / duration)) / 4;\n}\n\n// Drawl envelope: logarithmic decay\nfunction drawl(input, duration) {\n  return 1 / Math.log10(2 * Math.PI * input / duration + 1.9);\n}\n\n// Tempered envelope: combines drop and drawl\nfunction tempered(input, duration) {\n  return drop(input, duration) * drawl(input, duration);\n}\n/*   ~~~   ~~~\n  /   \\ /   \\\n /     \\     \\\n*/\nfunction organLike(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.6 * Math.sin(4 * Math.PI * input / duration) + 0.4 * Math.sin(6 * Math.PI * input / duration);\n}\n\n/*\ndrum or gong\n  ~~~~\n /    \\\n/      ~~~\n       \\\n        ~\n\n\n*/\nfunction percussionLike(input, duration) {\n  return Math.exp(-input / duration) * Math.sin(2 * Math.PI * input / duration);\n}\n\n/*\n   ~~~   ~~~   ~~~\n  /   \\ /   \\ /   \\\n /     \\     \\\n\n*/\n\nfunction woodwindLike(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.75 * Math.sin(3 * Math.PI * input / duration) + 0.5 * Math.sin(5 * Math.PI * input / duration);\n}\n\n/*\n  ~~~~\n /    \\\n/      ~~~\n       \\\n        ~~\n\n*/\n\nfunction bellLike(input, duration) {\n  return Math.exp(-input / duration) * (Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(4 * Math.PI * input / duration));\n}\n/*\n   ~~~   ~~~   ~~~\n  /   \\ /   \\ /   \\\n /     \\     \\\n\n*/\n\nfunction guitar(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(4 * Math.PI * input / duration) + 0.25 * Math.sin(6 * Math.PI * input / duration);\n}\n/*\n  /|  /|  /|  /|\n / | / | / | / |\n\n*/\n\nfunction brassLike(input, duration) {\n  return 2 * (input / duration - Math.floor(input / duration + 0.5));\n}\n\n/*\n  /\\/\\__/\\/\\__\n /            \\\n/              \\\n\n*/\n\nfunction electricGuitar(input, duration) {\n  return Math.tanh(Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(4 * Math.PI * input / duration));\n}\n\n/*\n  ~~~~      ~~~~\n /    \\    /    \\\n/      \\  /      \\\n\n*/\nfunction bassGuitar(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.3 * Math.sin(6 * Math.PI * input / duration) + 0.1 * Math.sin(10 * Math.PI * input / duration);\n}\n/*\n   ~~~   ~~~   ~~~\n  /   \\ /   \\ /   \\\n /     \\     \\\n\n*/\n\nfunction trumpet(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.7 * Math.sin(3 * Math.PI * input / duration) + 0.5 * Math.sin(5 * Math.PI * input / duration);\n}\n\n/*\n\n  ~~~      ~~~\n /   \\    /   \\\n/     \\  /     \\\n\n\n*/\n\nfunction cello(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.4 * Math.sin(4 * Math.PI * input / duration) + 0.2 * Math.sin(6 * Math.PI * input / duration);\n}\n\n/*\n   ~~~   ~~~\n  /   \\ /   \\\n /     \\     \\\n\n*/\nfunction harp(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(4 * Math.PI * input / duration) + 0.25 * Math.sin(8 * Math.PI * input / duration);\n}\n\n/*\n\n  ~~~~~   ~~~~~\n /     \\ /     \\\n/       \\       \\\n\n*/\nfunction piano(input, duration) {\n  return Math.exp(-input / duration) * (Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(3 * Math.PI * input / duration) + 0.3 * Math.sin(5 * Math.PI * input / duration));\n}\n\n/*\n  ~~~   ~~~   ~~~\n /   \\ /   \\ /   \\\n\n*/\nfunction violin(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.6 * Math.sin(4 * Math.PI * input / duration) + 0.3 * Math.sin(6 * Math.PI * input / duration);\n}\n\n/*\n  ~~~   ~~~   ~~~\n /   \\ /   \\ /   \\\n\n*/\n\nfunction synthPad(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.7 * Math.sin(2.5 * Math.PI * input / duration) + 0.4 * Math.sin(3 * Math.PI * input / duration);\n}\n\n/*\n\n   ~~~   ~~~\n  /   \\ /   \\\n /     \\     \\\n\n*/\n\nfunction organ(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(4 * Math.PI * input / duration) + 0.3 * Math.sin(8 * Math.PI * input / duration);\n}\n\n/*\n  ~~~   ~~~\n /   \\ /   \\\n/     \\\n\n*/\n\nfunction xylophone(input, duration) {\n  return Math.exp(-input / duration) * (Math.sin(2 * Math.PI * input / duration) + 0.8 * Math.sin(3 * Math.PI * input / duration));\n}\n\n/*\n\n   ~~~   ~~~\n  /   \\ /   \\\n /     \\     \\\n\n*/\n\nfunction saxophone(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.75 * Math.sin(3 * Math.PI * input / duration) + 0.5 * Math.sin(5 * Math.PI * input / duration) + 0.25 * Math.sin(7 * Math.PI * input / duration);\n}\n\n/*\n   ~~~      ~~~\n  /   \\    /   \\\n /     \\  /     \\\n\n*/\n\nfunction trombone(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.6 * Math.sin(4 * Math.PI * input / duration) + 0.4 * Math.sin(6 * Math.PI * input / duration);\n}\n\n/*\n  ~~~\n /   \\\n/     \\\n   ~~\n\n*/\nfunction marimba(input, duration) {\n  return Math.exp(-input / (2 * duration)) * (Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(4 * Math.PI * input / duration));\n}\n\n/*\n   ~~~   ~~~   ~~~\n  /   \\ /   \\ /   \\\n /     \\     \\\n\n\n*/\n\nfunction acousticGuitar(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(3 * Math.PI * input / duration) + 0.25 * Math.sin(5 * Math.PI * input / duration);\n}\n\n/*\n\n  ~~~~~\n /     \\\n/       \\\n\n*/\nfunction timpani(input, duration) {\n  return Math.exp(-input / duration) * (Math.sin(2 * Math.PI * input / duration) + 0.3 * Math.sin(6 * Math.PI * input / duration));\n}\n\n/*\n   ~~~   ~~~\n  /   \\ /   \\\n /     \\     \\\n\n*/\nfunction clarinet(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.5 * Math.sin(3 * Math.PI * input / duration) + 0.25 * Math.sin(5 * Math.PI * input / duration);\n}\n\n/*\n   ~~~   ~~~   ~~~\n  /   \\ /   \\ /   \\\n /     \\     \\\n\n*/\n\nfunction bagpipes(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.6 * Math.sin(4 * Math.PI * input / duration) + 0.4 * Math.sin(6 * Math.PI * input / duration) + 0.2 * Math.sin(8 * Math.PI * input / duration);\n}\n\n/*\n  ~~~\n /   \\\n/     \\\n\n*/\nfunction synthBass(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.4 * Math.sin(4 * Math.PI * input / duration);\n}\n\n/*\n   ~~~   ~~~\n  /   \\ /   \\\n /     \\\n\n*/\n\nfunction steelDrum(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.7 * Math.sin(3 * Math.PI * input / duration) + 0.4 * Math.sin(5 * Math.PI * input / duration);\n}\n\n/*\n   ~~~   ~~~   ~~~\n  /   \\ /   \\ /   \\\n /     \\\n\n*/\n\nfunction accordion(input, duration) {\n  return Math.sin(2 * Math.PI * input / duration) + 0.8 * Math.sin(3 * Math.PI * input / duration) + 0.5 * Math.sin(5 * Math.PI * input / duration);\n}\nfunction glottalStop(input, duration) {\n  var base = Math.sin(2 * Math.PI * input / duration);\n  var slide = 0.2 * Math.sin(4 * Math.PI * input / duration);\n  return base + slide;\n}\n\n\n//# sourceURL=webpack://PN/./src/instruments/envelope.js?");

/***/ }),

/***/ "./src/instruments/instrumentSelector.js":
/*!***********************************************!*\
  !*** ./src/instruments/instrumentSelector.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   instrument: () => (/* binding */ instrument)\n/* harmony export */ });\n/* harmony import */ var _pn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pn.js */ \"./src/pn.js\");\n/* harmony import */ var _instruments_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instruments.js */ \"./src/instruments/instruments.js\");\n// instrumentSelector.js\n\n\n // Assuming you have an Instruments class defined\n\n// Helper to select an instrument\nfunction instrument(instrumentName) {\n  switch (instrumentName.toLowerCase()) {\n    case 'piano':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Piano();\n      break;\n    case 'organ':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Organ();\n      break;\n    case 'guitar':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Guitar();\n      break;\n    case 'bass':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Bass();\n      break;\n    case 'violin':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Violin();\n      break;\n    case 'trumpet':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Trumpet();\n      break;\n    case 'flute':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Flute();\n      break;\n    case 'drum':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Drum();\n      break;\n    case 'british':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().British();\n      break;\n    case 'xylophone':\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_js__WEBPACK_IMPORTED_MODULE_1__.Instruments().Xylophone();\n      break;\n    default:\n      console.log('Instrument not found!');\n      return;\n  }\n  //console.log(`Selected instrument: ${instrumentName}`);\n}\n\n\n//# sourceURL=webpack://PN/./src/instruments/instrumentSelector.js?");

/***/ }),

/***/ "./src/instruments/instruments.js":
/*!****************************************!*\
  !*** ./src/instruments/instruments.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Instruments: () => (/* binding */ Instruments)\n/* harmony export */ });\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./envelope.js */ \"./src/instruments/envelope.js\");\n/* harmony import */ var _wave_harmonic_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../wave/harmonic.js */ \"./src/wave/harmonic.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n//instruments.js\n // Assuming drop is an envelope function\n\nvar Instruments = /*#__PURE__*/function () {\n  function Instruments() {\n    _classCallCheck(this, Instruments);\n  }\n  return _createClass(Instruments, [{\n    key: \"Piano\",\n    value: function Piano() {\n      return _envelope_js__WEBPACK_IMPORTED_MODULE_0__.piano;\n    }\n  }, {\n    key: \"British\",\n    value: function British() {\n      return _envelope_js__WEBPACK_IMPORTED_MODULE_0__.glottalStop;\n    }\n  }, {\n    key: \"Organ\",\n    value: function Organ() {\n      return organ;\n    }\n  }, {\n    key: \"Guitar\",\n    value: function Guitar() {\n      return _envelope_js__WEBPACK_IMPORTED_MODULE_0__.electricGuitar;\n    }\n  }, {\n    key: \"Bass\",\n    value: function Bass() {\n      return _envelope_js__WEBPACK_IMPORTED_MODULE_0__.tadpole;\n    }\n  }, {\n    key: \"Violin\",\n    value: function (_Violin) {\n      function Violin() {\n        return _Violin.apply(this, arguments);\n      }\n      Violin.toString = function () {\n        return _Violin.toString();\n      };\n      return Violin;\n    }(function () {\n      return Violin;\n    })\n  }, {\n    key: \"Trumpet\",\n    value: function Trumpet() {\n      return _envelope_js__WEBPACK_IMPORTED_MODULE_0__.trumpet;\n    }\n  }, {\n    key: \"Flute\",\n    value: function Flute() {\n      return _envelope_js__WEBPACK_IMPORTED_MODULE_0__.flat;\n    }\n  }, {\n    key: \"Drum\",\n    value: function Drum() {\n      return _envelope_js__WEBPACK_IMPORTED_MODULE_0__.flat;\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://PN/./src/instruments/instruments.js?");

/***/ }),

/***/ "./src/output/channels.js":
/*!********************************!*\
  !*** ./src/output/channels.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mono: () => (/* binding */ mono),\n/* harmony export */   stereo: () => (/* binding */ stereo)\n/* harmony export */ });\n/* harmony import */ var _pn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pn.js */ \"./src/pn.js\");\n\n\n// Create the stereo output by interleaving two channels (left and right)\n\n// Create the stereo output by interleaving two channels (left and right)\nfunction mono() {\n  var c1 = _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].songDataOutput;\n  return c1;\n}\nfunction stereo() {\n  var c1 = _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].songDataOutput;\n  var c2 = _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].songDataOutput;\n  var maxTuneLength = 6000000;\n  var tolerance = 1500;\n\n  // Check if the input arrays exceed the maximum tune length\n  if (c1.length > maxTuneLength) {\n    throw new Error('Tune too long, use the command line tool instead');\n  }\n  var minLength = Math.floor(c1.length);\n\n  // Duplicate c1 if c2 is empty\n  if (c2.length === 0) {\n    c2 = c1.slice();\n  }\n\n  // Adjust lengths if they are within the tolerance\n  var d1 = c1.length - c2.length;\n  var d2 = c2.length - c1.length;\n  if (d1 > 0 && d1 < tolerance) {\n    c1 = c1.slice(0, c2.length);\n  } else if (d2 > 0 && d2 < tolerance) {\n    c2 = c2.slice(0, c1.length);\n  }\n\n  // Interleave the samples to form stereo data\n  var stereoData = [];\n  for (var i = 0; i < minLength; i++) {\n    stereoData.push(c1[i], c2[i]);\n  }\n  return stereoData;\n}\n\n\n//# sourceURL=webpack://PN/./src/output/channels.js?");

/***/ }),

/***/ "./src/output/wav.js":
/*!***************************!*\
  !*** ./src/output/wav.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   save: () => (/* binding */ save)\n/* harmony export */ });\n/* harmony import */ var _channels_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channels.js */ \"./src/output/channels.js\");\n\n\n// Function to create WAV header using Uint8Array\nfunction writeWaveHeader(dataLength, sampleRate) {\n  var numChannels = 1,\n    bitsPerSample = 16;\n  var byteRate = sampleRate * numChannels * bitsPerSample / 8;\n  var blockAlign = numChannels * bitsPerSample / 8;\n\n  // Uint8Array with a size of 44 bytes for the header\n  var buffer = new Uint8Array(44);\n  var view = new DataView(buffer.buffer);\n\n  // \"RIFF\" chunk descriptor\n  buffer.set([82, 73, 70, 70], 0); // \"RIFF\"\n  view.setUint32(4, 36 + dataLength, true); // Chunk size\n  buffer.set([87, 65, 86, 69], 8); // \"WAVE\"\n\n  // \"fmt \" sub-chunk\n  buffer.set([102, 109, 116, 32], 12); // \"fmt \"\n  view.setUint32(16, 16, true); // Subchunk1Size (16 for PCM)\n  view.setUint16(20, 1, true); // AudioFormat (1 for PCM)\n  view.setUint16(22, numChannels, true); // NumChannels\n  view.setUint32(24, sampleRate, true); // SampleRate\n  view.setUint32(28, byteRate, true); // ByteRate\n  view.setUint16(32, blockAlign, true); // BlockAlign\n  view.setUint16(34, bitsPerSample, true); // BitsPerSample\n\n  // \"data\" sub-chunk\n  buffer.set([100, 97, 116, 97], 36); // \"data\"\n  view.setUint32(40, dataLength, true); // Subchunk2Size (data length)\n\n  return buffer;\n}\n\n// Function to save WAV file\nfunction save() {\n  var fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'play-noise';\n  var sampleRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 44100;\n  var volume = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;\n  var data = (0,_channels_js__WEBPACK_IMPORTED_MODULE_0__.mono)(); // Get the audio data from the mono function (assumed to be between -1 and 1)\n  var bitsPerSample = 16;\n  var numChannels = 2; // Stereo\n\n  var maxVolume = 32767;\n  var volumeScale = maxVolume / volume;\n\n  // Create buffer for audio data (2 bytes per sample per channel)\n  var buffer = new Uint8Array(data.length * numChannels * 2);\n  var view = new DataView(buffer.buffer);\n  for (var i = 0; i < data.length; i++) {\n    var sample = Math.max(-1, Math.min(1, data[i] * volumeScale));\n    var intSample = Math.floor(sample * 32767);\n\n    // Write sample for both left and right channels\n    view.setInt16(i * 4, intSample, true); // Left channel\n    view.setInt16(i * 4 + 2, intSample, true); // Right channel\n  }\n\n  // Create WAV header\n  var waveHeader = writeWaveHeader(buffer.length, sampleRate);\n\n  // Combine header and audio data into one buffer\n  var wavFile = new Uint8Array(waveHeader.length + buffer.length);\n  wavFile.set(waveHeader, 0);\n  wavFile.set(buffer, waveHeader.length);\n\n  // Create a Blob from the WAV data\n  var blob = new Blob([wavFile], {\n    type: 'audio/wav'\n  });\n\n  // Create a download link and trigger it\n  var a = document.createElement('a');\n  a.href = URL.createObjectURL(blob);\n  a.download = fileName;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  console.log(\"WAV file saved as \".concat(fileName));\n}\n\n//# sourceURL=webpack://PN/./src/output/wav.js?");

/***/ }),

/***/ "./src/pn.js":
/*!*******************!*\
  !*** ./src/pn.js ***!
  \*******************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _pitchFrequencies_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pitchFrequencies.json */ \"./src/pitchFrequencies.json\");\n/* harmony import */ var _instruments_envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./instruments/envelope.js */ \"./src/instruments/envelope.js\");\n/* harmony import */ var _wave_harmonic_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wave/harmonic.js */ \"./src/wave/harmonic.js\");\n// pn.js\n\n\n\nvar PN = {\n  currentInstrument: null,\n  pitchFrequencies: _pitchFrequencies_json__WEBPACK_IMPORTED_MODULE_0__,\n  duration: 0.5,\n  // Default duration in seconds\n  volume: 0.2,\n  // Default volume level\n  harmonic: _wave_harmonic_js__WEBPACK_IMPORTED_MODULE_2__.first,\n  // Default harmonic function\n  songDataOutput: null,\n  key: 'C5#'\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PN);\n\n//# sourceURL=webpack://PN/./src/pn.js?");

/***/ }),

/***/ "./src/wave/encoder.js":
/*!*****************************!*\
  !*** ./src/wave/encoder.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Note: () => (/* binding */ Note),\n/* harmony export */   Tune: () => (/* binding */ Tune)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/wave/utils.js\");\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n// Define pitch and keys globally\nvar pitch = {};\nvar tuneKey = {};\nvar sharpKeys = [];\nvar flatKeys = [];\n\n// Initialize pitches and keys\nsetupPitches();\nsetupKeys();\n\n// Note class representing a musical note\nvar Note = /*#__PURE__*/function () {\n  function Note() {\n    var pitch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var accidental = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var length = arguments.length > 2 ? arguments[2] : undefined;\n    var env = arguments.length > 3 ? arguments[3] : undefined;\n    var har = arguments.length > 4 ? arguments[4] : undefined;\n    var vol = arguments.length > 5 ? arguments[5] : undefined;\n    _classCallCheck(this, Note);\n    this.pitch = Array.isArray(pitch) ? pitch : [];\n    this.accidental = accidental.length ? accidental : Array(this.pitch.length).fill(0);\n    this.length = length;\n    this.env = env;\n    this.har = har;\n    this.vol = vol;\n\n    //console.log(`Created Note - Pitch: ${this.pitch}, Accidental: ${this.accidental}, Length: ${this.length}, Volume: ${this.vol}`);\n  }\n  return _createClass(Note, [{\n    key: \"encodeVoice\",\n    value: function encodeVoice() {\n      var _this = this;\n      if (this.pitch.length === 0) {\n        //console.log(`Rest note - Length: ${this.length}`);\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rest)(this.length); // Handle rest\n      }\n\n      // Convert each pitch to its frequency and apply accidental adjustments\n      var noteDataArray = this.pitch.map(function (p, i) {\n        var adjustedPitch = p + (_this.accidental[i] || 0); // Apply accidental (sharp or flat)\n        //const frequencyValue = frequency(adjustedPitch);\n        var frequencyValue = adjustedPitch;\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.voiceData)(frequencyValue, _this.length, _this.vol, _this.env);\n      });\n      return concatNotes.apply(void 0, _toConsumableArray(noteDataArray)); // Handle both single note and chord\n    }\n  }, {\n    key: \"encodeNote\",\n    value: function encodeNote() {\n      var _this2 = this;\n      if (this.pitch.length === 0) {\n        //console.log(`Rest note - Length: ${this.length}`);\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rest)(this.length); // Handle rest\n      }\n\n      // Convert each pitch to its frequency and apply accidental adjustments\n      var noteDataArray = this.pitch.map(function (p, i) {\n        var adjustedPitch = p + (_this2.accidental[i] || 0); // Apply accidental (sharp or flat)\n        //const frequencyValue = frequency(adjustedPitch);\n        var frequencyValue = adjustedPitch;\n\n        //console.log(`${i} Encoding Note - Original Pitch: ${p}, Adjusted Pitch: ${adjustedPitch}, Frequency: ${frequencyValue}`);\n        //return noteData(441, 0.5, this.env, this.har, 0.2);\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.noteData)(frequencyValue, _this2.length, _this2.env, _this2.har, _this2.vol);\n      });\n      return concatNotes.apply(void 0, _toConsumableArray(noteDataArray)); // Handle both single note and chord\n    }\n  }]);\n}();\nvar Tune = /*#__PURE__*/function () {\n  function Tune(key) {\n    var ch1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var ch2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    _classCallCheck(this, Tune);\n    this.key = key;\n    this.ch1 = this.ensureNotes(ch1); // Ensure that notes are instances of the Note class\n    this.ch2 = this.ensureNotes(ch2); // Ensure that notes are instances of the Note class\n  }\n\n  // Ensure that all items in the array are instances of the Note class\n  return _createClass(Tune, [{\n    key: \"ensureNotes\",\n    value: function ensureNotes(notes) {\n      return notes.map(function (note) {\n        if (note instanceof Note) {\n          return note;\n        } else {\n          return new Note(note.pitch, note.accidental, note.length, note.env, note.har, note.vol);\n        }\n      });\n    }\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      var acc = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.inKey)(sharpKeys, this.key) ? 1 : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.inKey)(flatKeys, this.key) ? -1 : 0;\n      this.ch1.forEach(function (note) {\n        return adjustAccidentals(note, acc);\n      });\n      this.ch2.forEach(function (note) {\n        return adjustAccidentals(note, acc);\n      });\n      var ch1Data = [];\n      var ch2Data = [];\n      var currentInputInstrument = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getInputInstrument)();\n      for (var i = 0; i < this.ch1.length; i++) {\n        var note = this.ch1[i];\n        console.log(\"Note ch1 \".concat(JSON.stringify(note)));\n        var encoded = void 0;\n        encoded = note.encodeNote();\n        ch1Data.push(encoded);\n      }\n      for (var _i = 0; _i < this.ch2.length; _i++) {\n        var _note = this.ch2[_i];\n        console.log(\"Note ch2 \".concat(JSON.stringify(_note)));\n        var _encoded = void 0;\n        _encoded = _note.encodeNote();\n        ch2Data.push(_encoded);\n      }\n\n      //    return stereo(ch1Data.flat(), ch2Data.flat());\n\n      return ch1Data.flat();\n    }\n  }]);\n}();\nfunction concatNotes() {\n  for (var _len = arguments.length, notes = new Array(_len), _key = 0; _key < _len; _key++) {\n    notes[_key] = arguments[_key];\n  }\n  // Check if there are any notes\n  if (notes.length === 0) return [];\n\n  // Get the length of the first note (to compare lengths of all notes)\n  var length = notes[0].length;\n\n  // Ensure all notes have the same length\n  for (var _i2 = 0, _notes = notes; _i2 < _notes.length; _i2++) {\n    var note = _notes[_i2];\n    if (note.length !== length) {\n      throw new Error('Length of notes are not the same');\n    }\n  }\n\n  // Create an array to hold the concatenated result\n  var data = new Array(length).fill(0);\n\n  // Add up all the notes at each index\n  for (var i = 0; i < length; i++) {\n    var _iterator = _createForOfIteratorHelper(notes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _note2 = _step.value;\n        data[i] += _note2[i];\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return data;\n}\n\n// Adjust accidentals for each note based on key signature\nfunction adjustAccidentals(note, acc) {\n  if (!note.pitch || !Array.isArray(note.pitch) || note.pitch.length === 0) {\n    note.pitch = [];\n  }\n  if (!note.accidental || !Array.isArray(note.accidental)) {\n    note.accidental = Array(note.pitch.length).fill(0);\n  }\n  note.accidental = note.accidental.map(function (a) {\n    return a + acc;\n  });\n}\n\n/*\nsetupPitches();\nsetupKeys();\n\nconsole.log(pitch);   // Output the pitch mapping\nconsole.log(tuneKey); // Output the key signature mapping\n*/\n\n// Utility function to set up pitches\n// Setup pitches\n\nfunction setupPitches() {\n  var notes = ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  var nums = [-57, -55, -53, -52, -50, -48, -46];\n  var _loop = function _loop(i) {\n    notes.forEach(function (note, j) {\n      nums[j] += 12;\n      pitch[\"\".concat(note).concat(i)] = nums[j];\n    });\n  };\n  for (var i = 1; i < 8; i++) {\n    _loop(i);\n  }\n}\n\n// Initialize the tuneKey array, which is used to apply the key signature to notes\n\nfunction setupKeys() {\n  tuneKey['C'] = [];\n  var sharpKeys = ['G', 'D', 'A', 'E', 'B', 'F#', 'C#'];\n  var sharpNotes = [pitch['f1'], pitch['c1'], pitch['g1'], pitch['d1'], pitch['a1'], pitch['e1'], pitch['b1']];\n  sharpKeys.forEach(function (key, i) {\n    var k = [];\n    for (var j = 0; j < i + 1; j++) {\n      for (var l = 1; l < 6; l++) {\n        k.push(sharpNotes[j] + 12 * l);\n      }\n    }\n    tuneKey[key] = k;\n  });\n  var flatKeys = ['F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb'];\n  var flatNotes = [pitch['b1'], pitch['e1'], pitch['a1'], pitch['d1'], pitch['g1'], pitch['c1'], pitch['f1']];\n  flatKeys.forEach(function (key, i) {\n    var k = [];\n    for (var j = 0; j < i + 1; j++) {\n      for (var l = 1; l < 6; l++) {\n        k.push(flatNotes[j] + 12 * l);\n      }\n    }\n    tuneKey[key] = k;\n  });\n}\n\n\n//# sourceURL=webpack://PN/./src/wave/encoder.js?");

/***/ }),

/***/ "./src/wave/harmonic.js":
/*!******************************!*\
  !*** ./src/wave/harmonic.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base: () => (/* binding */ base),\n/* harmony export */   first: () => (/* binding */ first),\n/* harmony export */   harmonics: () => (/* binding */ harmonics),\n/* harmony export */   second: () => (/* binding */ second),\n/* harmony export */   stringed: () => (/* binding */ stringed),\n/* harmony export */   third: () => (/* binding */ third)\n/* harmony export */ });\n// harmonic.js\n\n// The harmonic describes the additional harmonics added to the fundamental frequency\nvar harmonics = {};\n\n// Initialize harmonics\nharmonics['first'] = first;\nharmonics['second'] = second;\nharmonics['third'] = third;\nharmonics['stringed'] = stringed;\n\n// Base function to calculate the base frequency\nfunction base(input) {\n  return 2 * Math.PI * input;\n}\n\n// First harmonic: fundamental frequency\nfunction first(input) {\n  return Math.sin(base(input));\n}\n\n// Second harmonic: adds the second harmonic (double the base frequency)\nfunction second(input) {\n  return Math.sin(base(input)) + Math.sin(base(input) * 2);\n}\n\n// Third harmonic: adds the third harmonic (triple the base frequency)\nfunction third(input) {\n  return Math.sin(base(input)) + Math.sin(base(input) * 2) + Math.sin(base(input) * 3);\n}\n\n// Stringed instrument harmonic: complex combination of harmonics\nfunction stringed(input) {\n  return 3 * Math.sin(base(input)) + 0.5 * Math.sin(base(input) * 0.5) + 1.5 * Math.sin(base(input) * 2) + 0.25 * Math.sin(base(input) * 3) + 0.125 * Math.sin(base(input) * 4);\n}\n\n// Export the harmonics object\n\n\n//# sourceURL=webpack://PN/./src/wave/harmonic.js?");

/***/ }),

/***/ "./src/wave/player.js":
/*!****************************!*\
  !*** ./src/wave/player.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNote: () => (/* binding */ createNote),\n/* harmony export */   createSong: () => (/* binding */ createSong),\n/* harmony export */   singVoice: () => (/* binding */ singVoice)\n/* harmony export */ });\n/* harmony import */ var _pn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pn.js */ \"./src/pn.js\");\n/* harmony import */ var _encoder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoder.js */ \"./src/wave/encoder.js\");\n/* harmony import */ var _harmonic_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./harmonic.js */ \"./src/wave/harmonic.js\");\n/* harmony import */ var _instruments_instruments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../instruments/instruments.js */ \"./src/instruments/instruments.js\");\n/* harmony import */ var _input_parseStringInput_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../input/parseStringInput.js */ \"./src/input/parseStringInput.js\");\n/* harmony import */ var _pitchFrequencies_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pitchFrequencies.json */ \"./src/pitchFrequencies.json\");\n/* harmony import */ var _input_wavProcessor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../input/wavProcessor.js */ \"./src/input/wavProcessor.js\");\n/* harmony import */ var _input_yinWavProcessor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../input/yinWavProcessor.js */ \"./src/input/yinWavProcessor.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"./src/wave/utils.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a musical note with the given note name.\n * If no instrument is selected, it defaults to Piano.\n *\n * @param {string|number} noteName - The name or number of the musical note (e.g., \"A4\", \"440\").\n * @returns {Note|undefined} - A new Note instance with the specified pitch, or undefined if the note is not found.\n *\n * @example\n * // Select an instrument and create a note\n * PN.instrument('piano');    // Select piano instrument\n * const note = createNote('C4'); // Creates a note with frequency for C4\n * console.log(note);         // Logs the created note\n * PN.save();\n */\n\nfunction createNote(noteName) {\n  // Set default instrument to piano if no instrument is selected\n  if (!_pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument) {\n    console.log('No instrument selected, defaulting to Piano.');\n    _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument = new _instruments_instruments_js__WEBPACK_IMPORTED_MODULE_3__.Instruments().Piano(); // Default to piano\n  }\n  var frequency = _pitchFrequencies_json__WEBPACK_IMPORTED_MODULE_5__[noteName];\n  if (!frequency) {\n    frequency = parseInt(noteName);\n    if (isNaN(frequency)) {\n      console.log(\"Note \".concat(noteName, \" not found!\"));\n      return;\n    }\n  }\n  if (typeof noteName === 'number') {\n    frequency = noteName;\n  }\n  if (!frequency) {\n    console.log(\"Please enter a number or musical note\");\n    return;\n  }\n  var note = new _encoder_js__WEBPACK_IMPORTED_MODULE_1__.Note([frequency],\n  // Frequency for the note\n  [0],\n  // No accidentals\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].duration,\n  // Use PN's duration\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument,\n  // Use the selected instrument's envelope\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].harmonic,\n  // Use PN's harmonic function\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].volume // Use PN's volume level\n  );\n  console.log(\"Created note \".concat(noteName, \" with frequency \").concat(frequency));\n  return note;\n}\n\n/**\n * Creates a song based on the input data.\n * The song is constructed from a series of note strings and durations.\n * Notes are processed and encoded into a Tune instance.\n *\n * @param {Array} songData - An array of song sections and note data, in string format.\n * @returns {Array} - The encoded song data.\n *\n * @example\n * // Define song data\n * const songData = [\n *   { duration: 1, notes: ['C4', 'E4', 'G4'] },\n *   { duration: 0.5, notes: ['A4', 'B4'] },\n *   { duration: 2, notes: ['D5'] }\n * ];\n *\n * // Create a song\n * PN.setVolume(0.5); // Set volume level\n * const song = createSong(songData); // Create a song from the input data\n * console.log(song); // Logs the encoded song data\n */\n\n// Helper to create a song\nfunction createSong(songData) {\n  (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.setInputInstrument)('note');\n  var myTune = new _encoder_js__WEBPACK_IMPORTED_MODULE_1__.Tune(_pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].key, [],\n  // ch1: Will be filled with notes\n  [] // ch2: Will be filled with notes\n  );\n  var parsedData = (0,_input_parseStringInput_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(songData); // Parse the input data\n  var songNotes = [];\n\n  // Loop through each parsed entry and create notes using createNote\n  parsedData.forEach(function (entry) {\n    var duration = entry.duration,\n      notes = entry.notes; // Destructure duration and notes from parsedData\n\n    // Set the duration for this note in PN (optional: use duration overrides)\n    _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].duration = duration;\n\n    // Loop through the notes and create each one using createNote\n    notes.forEach(function (noteName) {\n      var note = createNote(noteName); // Use createNote for each note\n      if (note) {\n        myTune.ch1.push(note); // Encode and add it to the song array\n      }\n    });\n  });\n\n  // Concatenate all notes to form the song\n  var songDataOutput = myTune.encode();\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].songDataOutput = songDataOutput;\n  return songDataOutput;\n}\nfunction closestPianoFrequency(frequency) {\n  if (frequency <= 0) {\n    return 0;\n  }\n\n  // Calculate the closest piano key number\n  var keyNumber = 49 + 12 * Math.log2(frequency / 440);\n  var closestKey = Math.round(keyNumber);\n\n  // Calculate the frequency of the closest piano key\n  var closestFrequency = 440 * Math.pow(2, (closestKey - 49) / 12);\n  //console.log(`closestFrequency ${closestFrequency} and original ${frequency}!`)\n\n  return convertToOctave(closestFrequency, 4);\n  //return  closestFrequency;\n}\nfunction convertToOctave(frequency, targetOctave) {\n  if (frequency <= 0) return null;\n\n  // Determine the original octave\n  var originalOctave = Math.floor(Math.log2(frequency / 440) * 12 / 12 + 4);\n\n  // Shift the frequency to the target octave\n  var scaledFrequency = frequency * Math.pow(2, targetOctave - originalOctave);\n  console.log(\"scaledFrequency \".concat(scaledFrequency, \" and original \").concat(frequency, \"!\"));\n  return scaledFrequency;\n}\n\n/**\n * Creates a musical note with the given note name.\n * If no instrument is selected, it defaults to Piano.\n *\n * @param {string} noteName - The name of audio file you wish to replicate.\n * @returns {File|undefined} - A new audio file instance with the specified pitch, or undefined if the note is not found.\n *\n * @example\n * // Select an instrument and create a note\n *      // Wrap everything in an async function\n *      async function runPNExample() {\n *          console.log(PN);  // This should print the PN object\n *           PN.instrument('British'); // Select the instrument\n *           // PN.setVolume(0.5); // Set volume (optional)\n *\n *           // Wait for PN.singVoice to complete\n *           const song = await PN.singVoice('recording2.wav');\n *\n *           console.log(\"Song created:\", song);\n *           console.log(PN.volume);  // Logs the current volume\n *               setTimeout(() => {\n *                   PN.save(); // Call save after the delay\n *                   saveLogToFile(logMessages);\n *\n *               }, 8000); // Delay in milliseconds (5000ms = 5s)\n *       }\n *\n *       // Run the function\n *       runPNExample();\n */\n\nfunction singVoice(audioFile) {\n  (0,_input_wavProcessor_js__WEBPACK_IMPORTED_MODULE_6__.readWavFile)(audioFile, function (voiceFrequencies) {\n    var skeleton = voiceFrequencies; // Assign voiceFrequencies to skeleton\n\n    var myTune = new _encoder_js__WEBPACK_IMPORTED_MODULE_1__.Tune(_pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].key, [],\n    // ch1: Will be filled with notes\n    [] // ch2: Will be filled with notes\n    );\n\n    // Iterate over each entry in the `skeleton` Map\n    skeleton.forEach(function (data, index) {\n      var frequency;\n      if (data[0] / 1000 >= 1 || data[0] < 80) {\n        frequency = closestPianoFrequency(87);\n      } else {\n        frequency = closestPianoFrequency(data[0]);\n      }\n      var note = new _encoder_js__WEBPACK_IMPORTED_MODULE_1__.Note(\n      //[Math.round(frequency)],             // Frequency\n      [data[0]], [0],\n      // No accidentals\n      data[2] / 2,\n      // Duration\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].currentInstrument,\n      // oscillators\n      _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].harmonic,\n      // Harmonic function\n      data[1] / 2) // Volume\n      ;\n      if (note) {\n        myTune.ch1.push(note);\n      }\n    });\n\n    // Concatenate all notes to form the song\n    var songDataOutput = myTune.encode();\n    _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].songDataOutput = songDataOutput;\n    return songDataOutput;\n  });\n}\n\n\n//# sourceURL=webpack://PN/./src/wave/player.js?");

/***/ }),

/***/ "./src/wave/setProperties.js":
/*!***********************************!*\
  !*** ./src/wave/setProperties.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setDuration: () => (/* binding */ setDuration),\n/* harmony export */   setHarmonic: () => (/* binding */ setHarmonic),\n/* harmony export */   setVolume: () => (/* binding */ setVolume)\n/* harmony export */ });\n/* harmony import */ var _pn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pn.js */ \"./src/pn.js\");\n\n\n/**\n * Sets the duration for notes in the PN object.\n *\n * @param {number} duration - The duration of the note in seconds.\n *\n * @example\n * // Set the duration of notes to 1 second\n * setDuration(1);\n * console.log(PN.duration);  // Logs: 1\n */\nfunction setDuration(duration) {\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].duration = duration;\n  console.log(\"Duration set to \".concat(duration, \" seconds\"));\n}\n\n/**\n * Sets the volume level for notes in the PN object.\n *\n * @param {number} volume - The volume level (e.g., between 0 and 1).\n *\n * @example\n * // Set the volume of notes to 0.75 (75% of max volume)\n * setVolume(0.75);\n * console.log(PN.volume);  // Logs: 0.75\n */\nfunction setVolume(volume) {\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].volume = volume;\n  console.log(\"Volume level set to \".concat(volume));\n}\n\n/**\n * Sets the harmonic function for notes in the PN object.\n *\n * @param {function} harmonicFunc - The harmonic function to apply to the notes.\n *\n * @example\n * // Set the harmonic function to 'first'\n * PN.setHarmonic(first);\n * console.log(PN.harmonic);  // Logs: [function: first]\n */\nfunction setHarmonic(harmonicFunc) {\n  _pn_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].harmonic = harmonicFunc;\n  console.log(\"Harmonic function set \".concat(harmonicFunc));\n}\n\n\n//# sourceURL=webpack://PN/./src/wave/setProperties.js?");

/***/ }),

/***/ "./src/wave/utils.js":
/*!***************************!*\
  !*** ./src/wave/utils.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateFrequency: () => (/* binding */ calculateFrequency),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   frequency: () => (/* binding */ frequency),\n/* harmony export */   getInputInstrument: () => (/* binding */ getInputInstrument),\n/* harmony export */   inKey: () => (/* binding */ inKey),\n/* harmony export */   inNote: () => (/* binding */ inNote),\n/* harmony export */   noteData: () => (/* binding */ noteData),\n/* harmony export */   noteData2: () => (/* binding */ noteData2),\n/* harmony export */   rest: () => (/* binding */ rest),\n/* harmony export */   setInputInstrument: () => (/* binding */ setInputInstrument),\n/* harmony export */   voiceData: () => (/* binding */ voiceData),\n/* harmony export */   voiceData2: () => (/* binding */ voiceData2)\n/* harmony export */ });\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n// utils.js\n\nvar instrument;\n\n// Sample rate is assumed to be constant\nvar sampleRate = 44100,\n  bitDepth = 16,\n  numChannels = 2,\n  wavAudioFormat = 1,\n  tolerance = 1500;\n\n// Generate rest (silence) data for the specified duration\nfunction rest(duration) {\n  var restData = [];\n  var totalSamples = Math.floor(duration * sampleRate);\n  for (var i = 0; i < totalSamples; i++) {\n    restData.push(0); // Silence\n  }\n  return restData;\n}\n\n// Concatenates an array of note arrays\nfunction concat() {\n  for (var _len = arguments.length, notes = new Array(_len), _key = 0; _key < _len; _key++) {\n    notes[_key] = arguments[_key];\n  }\n  return notes.flat(); // Flatten all note arrays into one\n}\n\n// Calculate frequency from pitch step\nfunction frequency(step) {\n  return 440.0 * Math.pow(2, step / 12.0); // A440 standard\n}\n\n// Returns the note data based on frequency, duration, envelope, harmonic, and volume\nfunction noteData(frequency, duration, envelope, harmonic, volume) {\n  var data = [];\n  for (var i = 0.0; i < duration; i = i + 1.0 / sampleRate) {\n    var x = volume * envelope(i, duration) * harmonic(frequency * i);\n    data.push(x);\n  }\n  return data;\n}\nfunction frequencyScale(step) {\n  return 440.0 * Math.pow(2, step / 12.0);\n}\nfunction floorTowardsZero(num) {\n  console.log(Math.floor(num));\n  return Math.floor(num);\n}\nfunction noteData2(frequency, duration, envelope, harmonic, volume) {\n  var data = [];\n  for (var i = 0; i < duration; i += 1.0 / sampleRate) {\n    var x = Math.floor(volume * envelope(i, duration) * harmonic(frequency * i));\n    data.push(x);\n  }\n  return data;\n}\n\n// Check if the given note is in the key signature\nfunction inKey(keys, note) {\n  return keys.includes(note);\n}\n\n// Check if the note is part of the specified key\nfunction inNote(notes, note) {\n  return notes.includes(note);\n}\n\n// utils.js\n\n/**\n * Get the frequency of a note based on its distance from A4 (440 Hz).\n * @param {string} note - The note (e.g., 'C4', 'A4', 'G#5').\n * @returns {number} - The frequency of the note in Hz.\n */\nfunction calculateFrequency(note) {\n  var noteMap = {\n    'C': -9,\n    'C#': -8,\n    'D': -7,\n    'D#': -6,\n    'E': -5,\n    'F': -4,\n    'F#': -3,\n    'G': -2,\n    'G#': -1,\n    'A': 0,\n    'A#': 1,\n    'B': 2\n  };\n  var noteUpper = note.toUpperCase();\n  var parsedNote = noteUpper.match(/^([A-G]#?)(\\d)$/);\n  if (!parsedNote) throw new Error(\"Invalid note format: \".concat(note));\n  var _parsedNote = _slicedToArray(parsedNote, 3),\n    noteName = _parsedNote[1],\n    octave = _parsedNote[2];\n  var semitoneDistance = noteMap[noteName] + (parseInt(octave) - 4) * 12;\n  return 440 * Math.pow(2, semitoneDistance / 12); // Frequency calculation\n}\n\n// Generate sample data with AHDSR envelope and multiple oscillators\nfunction voiceData2(frequency, duration, volume, oscillators) {\n  var sampleRate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 44100;\n  var data = [];\n  var totalSamples = Math.floor(sampleRate * duration);\n  var _loop = function _loop() {\n    var time = i / sampleRate; // Current time in seconds\n    var envelopeValue = EnvelopeAHDSR(time, duration); // Get envelope amplitude\n\n    // Combine contributions from all oscillators\n    var harmonicValue = 0;\n    oscillators.forEach(function (osc) {\n      var freq = frequency * (osc.k ? Math.pow(2, osc.k / 12) : 1); // Adjust for detuning\n      var waveValue = generateWaveValue(osc.w, freq, time); // Generate wave based on type\n      harmonicValue += osc.v * waveValue; // Scale by volume multiplier\n    });\n    var sample = volume * envelopeValue * harmonicValue; // Apply envelope to combined harmonic\n    data.push(sample);\n  };\n  for (var i = 0; i < totalSamples; i++) {\n    _loop();\n  }\n  return data;\n}\n\n// Generate wave value based on oscillator type\n// Generate sample data with AHDSR envelope and multiple oscillators\nfunction voiceData(frequency, duration, volume, oscillators) {\n  var sampleRate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 44100;\n  var data = [];\n  var totalSamples = Math.floor(sampleRate * duration);\n  var _loop2 = function _loop2() {\n    var time = i / sampleRate; // Current time in seconds\n\n    var sampleValue = 0;\n\n    // Iterate through oscillators and sum their contributions\n    oscillators.forEach(function (osc) {\n      var w = osc.w,\n        t = osc.t,\n        _osc$v = osc.v,\n        v = _osc$v === void 0 ? 1 : _osc$v,\n        _osc$a = osc.a,\n        a = _osc$a === void 0 ? 0 : _osc$a,\n        _osc$d = osc.d,\n        d = _osc$d === void 0 ? 0 : _osc$d,\n        _osc$s = osc.s,\n        s = _osc$s === void 0 ? 1 : _osc$s,\n        _osc$r = osc.r,\n        r = _osc$r === void 0 ? 0 : _osc$r,\n        _osc$h = osc.h,\n        h = _osc$h === void 0 ? 0 : _osc$h;\n\n      // Apply ADSRH envelope for this oscillator\n      var envelopeValue = calculateDynamicADSR(time, duration, a, d, s, r, h);\n\n      // Generate wave value\n      var oscFrequency = frequency * (t || 1); // Calculate frequency with detuning\n      var waveValue = generateWaveValue(w, oscFrequency, time);\n\n      // Combine envelope and oscillator values\n      var scaledWaveValue = v * waveValue * envelopeValue;\n      sampleValue += scaledWaveValue;\n    });\n    data.push(sampleValue); // Store the generated sample\n  };\n  for (var i = 0; i < totalSamples; i++) {\n    _loop2();\n  }\n  return data;\n}\n\n// Generate wave value based on oscillator type\nfunction generateWaveValue(type, frequency, time) {\n  var phase = 2 * Math.PI * frequency * time;\n  switch (type) {\n    case \"sine\":\n      return Math.sin(phase);\n    case \"triangle\":\n      return 2 * Math.abs(2 * (time * frequency - Math.floor(time * frequency + 0.5))) - 1;\n    case \"square\":\n      return Math.sign(Math.sin(phase));\n    case \"sawtooth\":\n      return 2 * (time * frequency - Math.floor(time * frequency + 0.5));\n    case \"n0\":\n      // White noise\n      return Math.random() * 2 - 1;\n    default:\n      return 0;\n    // Default to no contribution if unknown wave type\n  }\n}\n\n// Calculate AHDSR envelope value\nfunction calculateDynamicADSR(time, duration, a, d, s, r, h) {\n  var attackEnd = a;\n  var holdEnd = a + h;\n  var decayEnd = holdEnd + d;\n  var releaseStart = duration - r;\n  if (time < attackEnd) {\n    return time / a; // Attack phase (linear ramp)\n  } else if (time < holdEnd) {\n    return 1; // Hold phase (constant at peak)\n  } else if (time < decayEnd) {\n    return 1 - (time - holdEnd) / d * (1 - s); // Decay phase\n  } else if (time < releaseStart) {\n    return s; // Sustain phase\n  } else if (time <= duration) {\n    return s * (1 - (time - releaseStart) / r); // Release phase\n  } else {\n    return 0; // Beyond duration\n  }\n}\nfunction setInputInstrument(newInstrument) {\n  instrument = newInstrument;\n}\nfunction getInputInstrument() {\n  if (instrument === 'voice') {\n    return 'voice';\n  } else {\n    return 'note';\n  }\n}\n\n//# sourceURL=webpack://PN/./src/wave/utils.js?");

/***/ }),

/***/ "./src/pitchFrequencies.json":
/*!***********************************!*\
  !*** ./src/pitchFrequencies.json ***!
  \***********************************/
/***/ ((module) => {

eval("module.exports = /*#__PURE__*/JSON.parse('{\"C1\":32.7,\"C1#\":34.65,\"D1\":36.71,\"D1b\":38.89,\"E1\":41.2,\"F1\":43.65,\"F1#\":46.25,\"G1\":49,\"G1b\":51.91,\"A1\":55,\"A1#\":58.27,\"B1\":61.74,\"C2\":65.41,\"C2#\":69.3,\"D2\":73.42,\"D2b\":77.78,\"E2\":82.41,\"F2\":87.31,\"F2#\":92.5,\"G2\":98,\"G2b\":103.83,\"A2\":110,\"A2#\":116.54,\"B2\":123.47,\"C3\":130.81,\"C3#\":138.59,\"D3\":146.83,\"D3b\":155.56,\"E3\":164.81,\"F3\":174.61,\"F3#\":185,\"G3\":196,\"G3b\":207.65,\"A3\":220,\"A3#\":233.08,\"B3\":246.94,\"C4\":261.63,\"C4#\":277.18,\"D4\":293.66,\"D4b\":311.13,\"E4\":329.63,\"F4\":349.23,\"F4#\":369.99,\"G4\":392,\"G4b\":415.3,\"A4\":440,\"A4#\":466.16,\"B4\":493.88,\"C5\":523.25,\"C5#\":554.37,\"D5\":587.33,\"D5b\":622.25,\"E5\":659.25,\"F5\":698.46,\"F5#\":739.99,\"G5\":783.99,\"G5b\":830.61,\"A5\":880,\"A5#\":932.33,\"B5\":987.77,\"C6\":1046.5,\"C6#\":1108.73,\"D6\":1174.66,\"D6b\":1244.51,\"E6\":1318.51,\"F6\":1396.91,\"F6#\":1479.98,\"G6\":1567.98,\"G6b\":1661.22,\"A6\":1760,\"A6#\":1864.66,\"B6\":1975.53,\"C7\":2093,\"C7#\":2217.46,\"D7\":2349.32,\"D7b\":2489.02,\"E7\":2637.02,\"F7\":2793.83,\"F7#\":2959.96,\"G7\":3135.96,\"G7b\":3322.44,\"A7\":3520,\"A7#\":3729.31,\"B7\":3951.07,\"C8\":4186.01}');\n\n//# sourceURL=webpack://PN/./src/pitchFrequencies.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});